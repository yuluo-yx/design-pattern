//go:generate go run dynamic_proxy_generator.go
package main

import (
	"fmt"
	"os"
	"text/template"
)

// 代理模板
const proxyTemplate = `
// Code generated by dynamic_proxy_generator.go. DO NOT EDIT.
package main

import "fmt"

// DynamicGenerateProxy 代理类
type DynamicGenerateProxy struct {
    target IUserService
}

// NewDynamicGenerateProxy 创建代理实例
func NewDynamicGenerateProxy(target IUserService) IUserService {
    return &DynamicGenerateProxy{target: target}
}

// PreHandler 前置处理
func (p *DynamicGenerateProxy) PreHandler(method string, args ...interface{}) {
    fmt.Printf("Before calling %s with args: %v\n", method, args)
}

// PostHandler 后置处理
func (p *DynamicGenerateProxy) PostHandler(method string, args ...interface{}) {
    fmt.Printf("After calling %s with args: %v\n", method, args)
}

// GetUser 代理方法
func (p *DynamicGenerateProxy) GetUser(name string) (*User, error) {
    // 前置处理
    p.PreHandler("GetUser", name)
    defer p.PostHandler("GetUser", name)

    // 调用目标方法
    return p.target.GetUser(name)
}
`

func GenerateProxy() error {

	// 生成代理文件
	filename := "proxy_generated.go"
	f, err := os.Create(filename)
	if err != nil {
		return fmt.Errorf("failed to create file: %w", err)
	}
	defer f.Close()

	// 解析并执行模板
	tmpl := template.Must(template.New("proxy").Parse(proxyTemplate))
	if err := tmpl.Execute(f, nil); err != nil {
		return fmt.Errorf("failed to execute template: %w", err)
	}

	fmt.Printf("Generated proxy file: %s\n", filename)
	return nil
}
